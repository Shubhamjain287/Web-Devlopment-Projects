
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author acer
 */
public class usermyroom extends javax.swing.JFrame {

    ArrayList<room> al = new ArrayList<>();
    mytablemodel tm;

    public usermyroom() {
        initComponents();
        setSize(650, 550);
        setLocationRelativeTo(null);
        setResizable(false);
        tm = new usermyroom.mytablemodel();
        roomtable.setModel((TableModel) tm);
        roomtable.setOpaque(false);
        ((DefaultTableCellRenderer) roomtable.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        roomtable.setShowGrid(false);
        getmyrooms();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        roomtable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        roomtable.setBackground(new java.awt.Color(0, 0, 0));
        roomtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        roomtable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(roomtable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 20, 570, 402);

        jButton1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jButton1.setText("Leave Room");
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(260, 440, 160, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgroundicons/Webp.net-resizeimage(11).jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 650, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (roomtable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Select a room to leave");
        } else {
            try {

                int ans = JOptionPane.showConfirmDialog(this, "Are you sure want to delete", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                String e = al.get(roomtable.getSelectedRow()).name;
                if (ans == JOptionPane.YES_OPTION) {
                    String c = al.get(roomtable.getSelectedRow()).roomid;

                    HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/leaveroom")
                            .queryString("roomid", c)
                            .queryString("username", GlobalData.nameofuser)
                            .asString();
                    if (response.getBody().equals("RoomLeft")) {
                        JOptionPane.showMessageDialog(this, "You Left '" + e + "'Room");
                    }

//              {
                    getmyrooms();
//              } 

                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(usermyroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(usermyroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(usermyroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(usermyroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new usermyroom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable roomtable;
    // End of variables declaration//GEN-END:variables

    private void getmyrooms() {
        al.clear();
        try {
            HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/fetchmyrooms")
                    .queryString("username", GlobalData.nameofuser)
                    .asString();
            String ans = response.getBody();
            System.out.println(ans);
            StringTokenizer st = new StringTokenizer(ans, ";;");
            while (st.hasMoreTokens()) {
                String row = st.nextToken();
                StringTokenizer col = new StringTokenizer(row, "~~");
                String roomid = col.nextToken();
                String name = col.nextToken();
                String category = col.nextToken();
                String photo = col.nextToken();
                System.out.println("id" + roomid);
                al.add(new room(roomid, name, category, photo));

            }
            roomtable.getColumnModel().getColumn(2).setCellRenderer(new usermyroom.ImageRenderer());
            roomtable.setRowHeight(100);
            tm.fireTableDataChanged();
            roomtable.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        int i=Integer.parseInt(al.get(roomtable.getSelectedRow()).roomid);
                        new joinroom(i).setVisible(true);
                    }
                }

            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    class mytablemodel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int i, int j) {
            switch (j) {
                case 0:
                    return al.get(i).name;
                case 1:
                    return al.get(i).category;
                case 2:
                    return al.get(i).photo;
            }
            return null;

        }

        public String getColumnName(int j) {
            String col[] = {"Name", "Category", "Photo"};
            return col[j];
        }

    }

    class ImageRenderer extends DefaultTableCellRenderer {

        JLabel lbl = new JLabel();

        ImageIcon icon = new ImageIcon("");
        BufferedImage bufferedImage, newimage;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            try {
                URL url = new URL(GlobalData.hostname + "/GetResource/" + al.get(row).photo);
                System.out.println("url : " + url);
                bufferedImage = ImageIO.read(url);
                newimage = resizephoto(bufferedImage, 100, 100);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            icon = new ImageIcon(newimage);
            lbl.setIcon(icon);
            lbl.setBounds(0, 0, 100, 100);
            return lbl;
        }

    }

    BufferedImage resizephoto(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }
}
